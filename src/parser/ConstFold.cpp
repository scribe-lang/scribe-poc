/*
	MIT License

	Copyright (c) 2021 Scribe Language Repositories

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so.
*/

#include "Error.hpp"
#include "parser/Stmts.hpp"
#include "parser/TypeMgr.hpp"
#include "parser/ValueMgr.hpp"

namespace sc
{
namespace parser
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#define CHECK_VALUE() \
	if(value != nullptr && value->type != VUNKNOWN) return true

bool StmtBlock::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	vals.pushlayer();
	for(auto &s : stmts) {
		if(!s->const_fold(types, vals)) {
			err::set(line, col, "failed to execute comptime block");
			return false;
		}
	}
	vals.poplayer();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtType /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtType::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtSimple ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtSimple::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	switch(val.tok.val) {
	case lex::INT: value = vals.get(val.data.i); break;
	case lex::FLT: value = vals.get((double)val.data.f); break;
	case lex::CHAR: value = vals.get((int64_t)val.data.s[0]); break;
	case lex::STR: value = vals.get(val.data.s); break;
	default: err::set(val, "unknown simple type '%s'", val.tok.str().c_str()); return false;
	}
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// StmtFnCallInfo //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtFnCallInfo::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtExpr::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtVar::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();

	if(!val) return true;

	if(!val->const_fold(types, vals)) {
		err::set(line, col, "failed to const fold value of var");
		return false;
	}
	if(val->value) value = val->value;
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtFnSig::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	// for(auto &a : params) {
	// 	Value *res = vals.get_val(a->name.data.s);
	// 	if(!res) {
	// 		err::set(line, col, "failed to const fold function signature argument");
	// 		return false;
	// 	}
	// }
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtFnDef::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	// TODO: function definition will work only when a function call occurs
	// therefore disable function definition const folding via var declarations
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtHeader ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtHeader::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtLib //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtLib::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtExtern ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtExtern::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtEnum ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtEnum::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// StmtStruct //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtStruct::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// StmtVarDecl ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtVarDecl::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtCond::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtForIn ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtForIn::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtFor::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtWhile ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtWhile::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtRet::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtContinue /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtContinue::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtBreak ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtBreak::const_fold(TypeMgr &types, ValueMgr &vals)
{
	CHECK_VALUE();
	return true;
}
} // namespace parser
} // namespace sc