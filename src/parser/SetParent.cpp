/*
	MIT License

	Copyright (c) 2021 Scribe Language Repositories

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so.
*/

#include "parser/Stmts.hpp"
#include "parser/Type.hpp"

namespace sc
{
namespace parser
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_block_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_block_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	for(auto &s : stmts) {
		s->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_type_t /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_type_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	if(fn) fn->set_parent(this);
	for(auto &c : counts) c->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// stmt_simple_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_simple_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// stmt_fncallinfo_t //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_fncallinfo_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	for(auto &t : templates) {
		t->set_parent(this);
	}
	for(auto &a : args) {
		a->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_expr_t /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_expr_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	if(lhs) lhs->set_parent(this);
	if(rhs) rhs->set_parent(this);
	// TODO: or-var & or-blk
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_var_t //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_var_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	if(val) val->set_parent(this);
	if(vtype) vtype->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_fnsig_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_fnsig_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	for(auto &p : params) {
		p->set_parent(this);
	}
	if(rettype) rettype->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_fndef_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_fndef_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	sig->set_parent(this);
	if(blk) blk->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// stmt_header_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_header_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_lib_t //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_lib_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// stmt_extern_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_extern_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	sig->set_parent(this);
	if(headers) headers->set_parent(this);
	if(libs) libs->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// stmt_enumdef_t ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_enumdef_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	for(auto &i : items) {
		i->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// stmt_struct_t //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_struct_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	for(auto &f : fields) {
		f->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// stmt_vardecl_t ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_vardecl_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	for(auto &d : decls) {
		d->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_cond_t /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_cond_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	for(auto &c : conds) {
		if(c.cond) c.cond->set_parent(this);
		c.blk->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// stmt_forin_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_forin_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	in->set_parent(this);
	blk->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_for_t //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_for_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	if(init) init->set_parent(this);
	if(cond) cond->set_parent(this);
	if(incr) incr->set_parent(this);
	blk->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_while_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_while_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	if(cond) cond->set_parent(this);
	blk->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_ret_t //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_ret_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
	if(val) val->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_cont_t /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_cont_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// stmt_break_t ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void stmt_break_t::set_parent(stmt_base_t *parent)
{
	this->parent = parent;
	if(this->vtyp) this->vtyp->parent = parent;
}
} // namespace parser
} // namespace sc