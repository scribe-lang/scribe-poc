/*
	MIT License

	Copyright (c) 2021 Scribe Language Repositories

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so.
*/

#include "parser/Stmts.hpp"
#include "parser/Type.hpp"

namespace sc
{
namespace parser
{
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBlock::setParent(Stmt *parent)
{
	this->parent = parent;
	for(auto &s : stmts) {
		s->setParent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtType /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtType::setParent(Stmt *parent)
{
	this->parent = parent;
	if(fn) fn->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtSimple ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtSimple::setParent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtFnCallInfo //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnCallInfo::setParent(Stmt *parent)
{
	this->parent = parent;
	for(auto &t : templates) {
		t->setParent(this);
	}
	for(auto &a : args) {
		a->setParent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExpr::setParent(Stmt *parent)
{
	this->parent = parent;
	if(lhs) lhs->setParent(this);
	if(rhs) rhs->setParent(this);
	// TODO: or-var & or-blk
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVar::setParent(Stmt *parent)
{
	this->parent = parent;
	if(val) val->setParent(this);
	if(vtype) vtype->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnSig::setParent(Stmt *parent)
{
	this->parent = parent;
	for(auto &p : args) {
		p->setParent(this);
	}
	if(rettype) rettype->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnDef::setParent(Stmt *parent)
{
	this->parent = parent;
	sig->setParent(this);
	if(blk) blk->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtHeader ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtHeader::setParent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtLib //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtLib::setParent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtExtern ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExtern::setParent(Stmt *parent)
{
	this->parent = parent;
	sig->setParent(this);
	if(headers) headers->setParent(this);
	if(libs) libs->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtEnum //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtEnum::setParent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtStruct /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtStruct::setParent(Stmt *parent)
{
	this->parent = parent;
	for(auto &f : fields) {
		f->setParent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtVarDecl ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVarDecl::setParent(Stmt *parent)
{
	this->parent = parent;
	for(auto &d : decls) {
		d->setParent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtCond::setParent(Stmt *parent)
{
	this->parent = parent;
	for(auto &c : conds) {
		if(c.cond) c.cond->setParent(this);
		c.blk->setParent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtForIn /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtForIn::setParent(Stmt *parent)
{
	this->parent = parent;
	in->setParent(this);
	blk->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFor::setParent(Stmt *parent)
{
	this->parent = parent;
	if(init) init->setParent(this);
	if(cond) cond->setParent(this);
	if(incr) incr->setParent(this);
	blk->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtWhile ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtWhile::setParent(Stmt *parent)
{
	this->parent = parent;
	if(cond) cond->setParent(this);
	blk->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtRet::setParent(Stmt *parent)
{
	this->parent = parent;
	if(val) val->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtContinue ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtContinue::setParent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBreak ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBreak::setParent(Stmt *parent)
{
	this->parent = parent;
}
} // namespace parser
} // namespace sc