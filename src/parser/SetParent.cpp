/*
	MIT License

	Copyright (c) 2021 Scribe Language Repositories

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so.
*/

#include "parser/Stmts.hpp"

namespace sc
{
namespace parser
{
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBlock::set_parent(Stmt *parent)
{
	this->parent = parent;
	for(auto &s : stmts) {
		s->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtType /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtType::set_parent(Stmt *parent)
{
	this->parent = parent;
	if(fn) fn->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtSimple ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtSimple::set_parent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// StmtFnCallInfo //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnCallInfo::set_parent(Stmt *parent)
{
	this->parent = parent;
	for(auto &t : templates) {
		t->set_parent(this);
	}
	for(auto &a : args) {
		a->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExpr::set_parent(Stmt *parent)
{
	this->parent = parent;
	if(lhs) lhs->set_parent(this);
	if(rhs) rhs->set_parent(this);
	// TODO: or-var & or-blk
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVar::set_parent(Stmt *parent)
{
	this->parent = parent;
	if(val) val->set_parent(this);
	if(vtype) vtype->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnSig::set_parent(Stmt *parent)
{
	this->parent = parent;
	for(auto &p : params) {
		p->set_parent(this);
	}
	if(rettype) rettype->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnDef::set_parent(Stmt *parent)
{
	this->parent = parent;
	sig->set_parent(this);
	if(blk) blk->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtHeader ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtHeader::set_parent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtLib //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtLib::set_parent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtExtern ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExtern::set_parent(Stmt *parent)
{
	this->parent = parent;
	sig->set_parent(this);
	if(headers) headers->set_parent(this);
	if(libs) libs->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtEnum ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtEnum::set_parent(Stmt *parent)
{
	this->parent = parent;
	for(auto &i : items) {
		i->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// StmtStruct //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtStruct::set_parent(Stmt *parent)
{
	this->parent = parent;
	for(auto &f : fields) {
		f->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// StmtVarDecl ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVarDecl::set_parent(Stmt *parent)
{
	this->parent = parent;
	for(auto &d : decls) {
		d->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtCond::set_parent(Stmt *parent)
{
	this->parent = parent;
	for(auto &c : conds) {
		if(c.cond) c.cond->set_parent(this);
		c.blk->set_parent(this);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtForIn ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtForIn::set_parent(Stmt *parent)
{
	this->parent = parent;
	in->set_parent(this);
	blk->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFor::set_parent(Stmt *parent)
{
	this->parent = parent;
	if(init) init->set_parent(this);
	if(cond) cond->set_parent(this);
	if(incr) incr->set_parent(this);
	blk->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtWhile ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtWhile::set_parent(Stmt *parent)
{
	this->parent = parent;
	if(cond) cond->set_parent(this);
	blk->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtRet::set_parent(Stmt *parent)
{
	this->parent = parent;
	if(val) val->set_parent(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtContinue
////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtContinue::set_parent(Stmt *parent)
{
	this->parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBreak ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBreak::set_parent(Stmt *parent)
{
	this->parent = parent;
}
} // namespace parser
} // namespace sc