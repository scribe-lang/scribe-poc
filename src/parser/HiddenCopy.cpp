/*
	MIT License

	Copyright (c) 2021 Scribe Language Repositories

	Permission is hereby granted, free of charge, to any person obtaining a
	hiddenCopy of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, hiddenCopy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so.
*/

#include "parser/Stmts.hpp"

namespace sc
{
namespace parser
{
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtBlock::hiddenCopy(Stmt *par)
{
	std::vector<Stmt *> newstmts;
	for(auto &s : stmts) {
		newstmts.push_back(s->hiddenCopy(this));
	}
	Stmt *res   = new StmtBlock(mod, line, col, newstmts);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtType /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtType::hiddenCopy(Stmt *par)
{
	Stmt *newfn = fn ? fn->hiddenCopy(this) : nullptr;
	if(fn) {
		Stmt *res = new StmtType(mod, line, col, fn);

		return res;
	}
	Stmt *res   = new StmtType(mod, line, col, ptr, info, name, templates);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtSimple ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtSimple::hiddenCopy(Stmt *par)
{
	Stmt *res   = new StmtSimple(mod, line, col, val);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// StmtFnCallInfo //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtFnCallInfo::hiddenCopy(Stmt *par)
{
	std::vector<StmtType *> newtemplates;
	std::vector<Stmt *> newargs;
	for(auto &t : templates) {
		newtemplates.push_back(static_cast<StmtType *>(t->hiddenCopy(this)));
	}
	for(auto &a : args) {
		newargs.push_back(a->hiddenCopy(this));
	}
	Stmt *res   = new StmtFnCallInfo(mod, line, col, newtemplates, newargs);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtExpr::hiddenCopy(Stmt *par)
{
	Stmt *newlhs  = lhs ? lhs->hiddenCopy(this) : nullptr;
	Stmt *newrhs  = rhs ? rhs->hiddenCopy(this) : nullptr;
	StmtExpr *res = new StmtExpr(mod, line, col, newlhs, oper, newrhs);
	if(or_blk) res->or_blk = static_cast<StmtBlock *>(or_blk->hiddenCopy(this));
	res->or_blk_var = or_blk_var;
	res->parent	= par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtVar::hiddenCopy(Stmt *par)
{
	StmtType *newvtype = vtype ? static_cast<StmtType *>(vtype->hiddenCopy(this)) : nullptr;
	Stmt *newval	   = val ? val->hiddenCopy(this) : nullptr;

	Stmt *res   = new StmtVar(mod, line, col, name, newvtype, newval, comptime);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtFnSig::hiddenCopy(Stmt *par)
{
	std::vector<StmtVar *> newparams;
	for(auto &p : args) {
		newparams.push_back(static_cast<StmtVar *>(p->hiddenCopy(this)));
	}
	StmtType *newrettype =
	rettype ? static_cast<StmtType *>(rettype->hiddenCopy(this)) : nullptr;

	Stmt *res   = new StmtFnSig(mod, line, col, templates, newparams, newrettype, has_variadic);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtFnDef::hiddenCopy(Stmt *par)
{
	StmtFnSig *newsig = static_cast<StmtFnSig *>(sig->hiddenCopy(this));
	StmtBlock *newblk = blk ? static_cast<StmtBlock *>(blk->hiddenCopy(this)) : nullptr;
	Stmt *res	  = new StmtFnDef(mod, line, col, newsig, newblk);
	res->parent	  = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtHeader ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtHeader::hiddenCopy(Stmt *par)
{
	Stmt *res   = new StmtHeader(mod, line, col, names, flags);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtLib //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtLib::hiddenCopy(Stmt *par)
{
	Stmt *res   = new StmtLib(mod, line, col, flags);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtExtern ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtExtern::hiddenCopy(Stmt *par)
{
	StmtHeader *newheaders =
	headers ? static_cast<StmtHeader *>(headers->hiddenCopy(this)) : nullptr;
	StmtLib *newlibs  = libs ? static_cast<StmtLib *>(libs->hiddenCopy(this)) : nullptr;
	StmtFnSig *newsig = static_cast<StmtFnSig *>(sig->hiddenCopy(this));
	Stmt *res	  = new StmtExtern(mod, line, col, fname, newheaders, newlibs, newsig);
	res->parent	  = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtEnum ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtEnum::hiddenCopy(Stmt *par)
{
	Stmt *res   = new StmtEnum(mod, line, col, items);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// StmtStruct //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtStruct::hiddenCopy(Stmt *par)
{
	std::vector<StmtVar *> newfields;
	for(auto &f : fields) {
		newfields.push_back(static_cast<StmtVar *>(f->hiddenCopy(this)));
	}
	Stmt *res   = new StmtStruct(mod, line, col, decl, templates, newfields);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// StmtVarDecl ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtVarDecl::hiddenCopy(Stmt *par)
{
	std::vector<StmtVar *> newdecls;
	for(auto &d : decls) {
		newdecls.push_back(static_cast<StmtVar *>(d->hiddenCopy(this)));
	}
	Stmt *res   = new StmtVarDecl(mod, line, col, newdecls);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtCond::hiddenCopy(Stmt *par)
{
	std::vector<cond_t> newconds;
	for(auto &c : conds) {
		cond_t nc{c.cond ? c.cond->hiddenCopy(this) : nullptr,
			  static_cast<StmtBlock *>(c.blk->hiddenCopy(this))};
		newconds.push_back(nc);
	}
	Stmt *res   = new StmtCond(mod, line, col, newconds, comptime);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtForIn ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtForIn::hiddenCopy(Stmt *par)
{
	Stmt *newin	  = in->hiddenCopy(this);
	StmtBlock *newblk = static_cast<StmtBlock *>(blk->hiddenCopy(this));
	Stmt *res	  = new StmtForIn(mod, line, col, iter, newin, newblk, comptime);
	res->parent	  = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtFor::hiddenCopy(Stmt *par)
{
	Stmt *newinit	  = init ? init->hiddenCopy(this) : nullptr;
	Stmt *newcond	  = cond ? cond->hiddenCopy(this) : nullptr;
	Stmt *newincr	  = incr ? incr->hiddenCopy(this) : nullptr;
	StmtBlock *newblk = static_cast<StmtBlock *>(blk->hiddenCopy(this));
	Stmt *res	  = new StmtFor(mod, line, col, newinit, newcond, newincr, newblk);
	res->parent	  = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtWhile ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtWhile::hiddenCopy(Stmt *par)
{
	Stmt *newcond	  = cond ? cond->hiddenCopy(this) : nullptr;
	StmtBlock *newblk = static_cast<StmtBlock *>(blk->hiddenCopy(this));
	Stmt *res	  = new StmtWhile(mod, line, col, newcond, newblk);
	res->parent	  = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtRet::hiddenCopy(Stmt *par)
{
	Stmt *newval = val ? val->hiddenCopy(this) : nullptr;
	Stmt *res    = new StmtRet(mod, line, col, newval);
	res->parent  = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtContinue
////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtContinue::hiddenCopy(Stmt *par)
{
	Stmt *res   = new StmtContinue(mod, line, col);
	res->parent = par;
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBreak ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtBreak::hiddenCopy(Stmt *par)
{
	Stmt *res   = new StmtBreak(mod, line, col);
	res->parent = par;
	return res;
}
} // namespace parser
} // namespace sc