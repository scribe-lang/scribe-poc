// Logical Arithmetic

t0 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t1 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i1_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i1_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i1_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i1_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i1_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i1_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i1_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i1_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i8", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i8_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i8_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i8_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i8_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i8_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i8_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i8_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i8_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i16", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i16_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i16_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i16_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i16_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i16_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i16_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i16_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i16_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i32_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i32_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i32_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i32_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i32_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i32_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i32_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i32_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i64", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_i64_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_i64_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_i64_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_i64_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_i64_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_i64_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_i64_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_i64_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u8", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u8_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u8_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u8_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u8_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u8_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u8_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u8_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u8_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u16", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u16_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u16_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u16_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u16_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u16_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u16_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u16_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u16_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u32_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u32_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u32_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u32_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u32_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u32_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u32_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u32_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u64", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_u64_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_u64_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_u64_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_u64_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_u64_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_u64_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_u64_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_u64_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f32_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f32_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f32_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f32_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f32_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f32_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f32_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f32_f64; types.add_func("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f64", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_i1; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_i1; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_i1; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_i1; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_i1; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_i1; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_i1; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_i1; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_i8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_i8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_i8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_i8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_i8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_i8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_i8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_i8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_i16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_i16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_i16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_i16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_i16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_i16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_i16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_i16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_i32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_i32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_i32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_i32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_i32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_i32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_i32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_i32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_i64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_i64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_i64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_i64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_i64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_i64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_i64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_i64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_u8; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_u8; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_u8; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_u8; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_u8; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_u8; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_u8; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_u8; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_u16; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_u16; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_u16; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_u16; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_u16; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_u16; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_u16; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_u16; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_u32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_u32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_u32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_u32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_u32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_u32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_u32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_u32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_u64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_u64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_u64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_u64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_u64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_u64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_u64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_u64; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_f32; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_f32; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_f32; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_f32; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_f32; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_f32; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_f32; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_f32; types.add_func("!=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logand_f64_f64; types.add_func("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_logor_f64_f64; types.add_func("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_eq_f64_f64; types.add_func("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_lt_f64_f64; types.add_func("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_gt_f64_f64; types.add_func(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_le_f64_f64; types.add_func("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ge_f64_f64; types.add_func(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t0->copy()); fn->intrin_fn = intrinsic_ne_f64_f64; types.add_func("!=", fn, true);

