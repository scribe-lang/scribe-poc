// Logical Arithmetic

t0 = static_cast<TypeSimple *>(types.get("i1"));

t1 = static_cast<TypeSimple *>(types.get("i1"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_i1_i1, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_i1_i1, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_i1_i1, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_i1_i1, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_i1_i1, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_i1_i1, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_i1_i1, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_i1_i1, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_i8_i8, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_i8_i8, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_i8_i8, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_i8_i8, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_i8_i8, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_i8_i8, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_i8_i8, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_i8_i8, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_i16_i16, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_i16_i16, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_i16_i16, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_i16_i16, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_i16_i16, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_i16_i16, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_i16_i16, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_i16_i16, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_i32_i32, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_i32_i32, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_i32_i32, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_i32_i32, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_i32_i32, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_i32_i32, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_i32_i32, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_i32_i32, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_i64_i64, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_i64_i64, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_i64_i64, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_i64_i64, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_i64_i64, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_i64_i64, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_i64_i64, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_i64_i64, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_u8_u8, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_u8_u8, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_u8_u8, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_u8_u8, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_u8_u8, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_u8_u8, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_u8_u8, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_u8_u8, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_u16_u16, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_u16_u16, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_u16_u16, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_u16_u16, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_u16_u16, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_u16_u16, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_u16_u16, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_u16_u16, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_u32_u32, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_u32_u32, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_u32_u32, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_u32_u32, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_u32_u32, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_u32_u32, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_u32_u32, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_u32_u32, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_u64_u64, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_u64_u64, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_u64_u64, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_u64_u64, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_u64_u64, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_u64_u64, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_u64_u64, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_u64_u64, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_f32_f32, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_f32_f32, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_f32_f32, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_f32_f32, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_f32_f32, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_f32_f32, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_f32_f32, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_f32_f32, IVALUE); types.addFunc("!=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logand_f64_f64, IVALUE); types.addFunc("&&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_logor_f64_f64, IVALUE); types.addFunc("||", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_eq_f64_f64, IVALUE); types.addFunc("==", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_lt_f64_f64, IVALUE); types.addFunc("<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_gt_f64_f64, IVALUE); types.addFunc(">", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_le_f64_f64, IVALUE); types.addFunc("<=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ge_f64_f64, IVALUE); types.addFunc(">=", fn, true);
fn = func(types, {t1->copy(CONST | REF), t1->copy(CONST | REF)}, t0->copy()); fn->setIntrinsicFunc(intrinsic_ne_f64_f64, IVALUE); types.addFunc("!=", fn, true);

