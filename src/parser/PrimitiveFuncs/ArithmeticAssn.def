// Assign Arithmetic

t1 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));

t1 = static_cast<TypeSimple *>(types.get("i8", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i8_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i8_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i8_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i8_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i8_i8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i8_i8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i8_i8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i8_i8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i8_i8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i8_i8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i8_i8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i8_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i8_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i8_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i8_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i8_i16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i8_i16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i8_i16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i8_i16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i8_i16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i8_i16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i8_i16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i8_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i8_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i8_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i8_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i8_i32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i8_i32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i8_i32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i8_i32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i8_i32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i8_i32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i8_i32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i8_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i8_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i8_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i8_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i8_i64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i8_i64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i8_i64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i8_i64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i8_i64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i8_i64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i8_i64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i8_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i8_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i8_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i8_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i8_u8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i8_u8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i8_u8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i8_u8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i8_u8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i8_u8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i8_u8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i8_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i8_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i8_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i8_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i8_u16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i8_u16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i8_u16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i8_u16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i8_u16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i8_u16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i8_u16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i8_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i8_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i8_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i8_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i8_u32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i8_u32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i8_u32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i8_u32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i8_u32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i8_u32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i8_u32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i8_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i8_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i8_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i8_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i8_u64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i8_u64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i8_u64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i8_u64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i8_u64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i8_u64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i8_u64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_i8_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_i8_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_i8_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_i8_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_i8_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_i8_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_i8_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_i8_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_i8_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_i8_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i16", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i16_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i16_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i16_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i16_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i16_i8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i16_i8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i16_i8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i16_i8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i16_i8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i16_i8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i16_i8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i16_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i16_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i16_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i16_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i16_i16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i16_i16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i16_i16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i16_i16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i16_i16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i16_i16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i16_i16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i16_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i16_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i16_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i16_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i16_i32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i16_i32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i16_i32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i16_i32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i16_i32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i16_i32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i16_i32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i16_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i16_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i16_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i16_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i16_i64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i16_i64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i16_i64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i16_i64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i16_i64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i16_i64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i16_i64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i16_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i16_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i16_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i16_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i16_u8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i16_u8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i16_u8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i16_u8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i16_u8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i16_u8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i16_u8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i16_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i16_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i16_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i16_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i16_u16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i16_u16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i16_u16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i16_u16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i16_u16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i16_u16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i16_u16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i16_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i16_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i16_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i16_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i16_u32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i16_u32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i16_u32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i16_u32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i16_u32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i16_u32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i16_u32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i16_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i16_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i16_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i16_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i16_u64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i16_u64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i16_u64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i16_u64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i16_u64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i16_u64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i16_u64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_i16_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_i16_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_i16_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_i16_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_i16_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_i16_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_i16_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_i16_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_i16_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_i16_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i32_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i32_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i32_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i32_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i32_i8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i32_i8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i32_i8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i32_i8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i32_i8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i32_i8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i32_i8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i32_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i32_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i32_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i32_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i32_i16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i32_i16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i32_i16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i32_i16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i32_i16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i32_i16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i32_i16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i32_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i32_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i32_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i32_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i32_i32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i32_i32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i32_i32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i32_i32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i32_i32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i32_i32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i32_i32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i32_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i32_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i32_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i32_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i32_i64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i32_i64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i32_i64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i32_i64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i32_i64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i32_i64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i32_i64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i32_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i32_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i32_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i32_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i32_u8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i32_u8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i32_u8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i32_u8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i32_u8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i32_u8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i32_u8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i32_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i32_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i32_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i32_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i32_u16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i32_u16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i32_u16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i32_u16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i32_u16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i32_u16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i32_u16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i32_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i32_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i32_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i32_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i32_u32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i32_u32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i32_u32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i32_u32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i32_u32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i32_u32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i32_u32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i32_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i32_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i32_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i32_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i32_u64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i32_u64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i32_u64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i32_u64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i32_u64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i32_u64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i32_u64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_i32_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_i32_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_i32_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_i32_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_i32_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_i32_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_i32_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_i32_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_i32_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_i32_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i64", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i64_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i64_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i64_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i64_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i64_i8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i64_i8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i64_i8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i64_i8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i64_i8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i64_i8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i64_i8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i64_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i64_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i64_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i64_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i64_i16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i64_i16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i64_i16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i64_i16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i64_i16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i64_i16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i64_i16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i64_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i64_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i64_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i64_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i64_i32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i64_i32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i64_i32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i64_i32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i64_i32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i64_i32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i64_i32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i64_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i64_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i64_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i64_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i64_i64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i64_i64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i64_i64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i64_i64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i64_i64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i64_i64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i64_i64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i64_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i64_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i64_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i64_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i64_u8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i64_u8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i64_u8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i64_u8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i64_u8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i64_u8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i64_u8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i64_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i64_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i64_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i64_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i64_u16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i64_u16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i64_u16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i64_u16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i64_u16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i64_u16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i64_u16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i64_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i64_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i64_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i64_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i64_u32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i64_u32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i64_u32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i64_u32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i64_u32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i64_u32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i64_u32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_i64_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_i64_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_i64_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_i64_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_i64_u64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_i64_u64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_i64_u64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_i64_u64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_i64_u64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_i64_u64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_i64_u64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_i64_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_i64_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_i64_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_i64_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_i64_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_i64_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_i64_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_i64_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_i64_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_i64_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u8", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u8_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u8_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u8_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u8_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u8_i8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u8_i8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u8_i8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u8_i8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u8_i8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u8_i8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u8_i8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u8_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u8_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u8_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u8_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u8_i16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u8_i16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u8_i16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u8_i16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u8_i16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u8_i16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u8_i16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u8_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u8_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u8_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u8_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u8_i32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u8_i32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u8_i32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u8_i32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u8_i32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u8_i32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u8_i32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u8_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u8_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u8_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u8_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u8_i64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u8_i64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u8_i64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u8_i64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u8_i64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u8_i64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u8_i64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u8_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u8_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u8_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u8_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u8_u8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u8_u8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u8_u8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u8_u8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u8_u8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u8_u8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u8_u8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u8_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u8_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u8_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u8_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u8_u16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u8_u16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u8_u16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u8_u16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u8_u16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u8_u16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u8_u16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u8_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u8_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u8_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u8_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u8_u32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u8_u32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u8_u32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u8_u32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u8_u32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u8_u32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u8_u32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u8_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u8_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u8_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u8_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u8_u64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u8_u64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u8_u64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u8_u64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u8_u64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u8_u64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u8_u64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_u8_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_u8_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_u8_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_u8_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_u8_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_u8_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_u8_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_u8_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_u8_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_u8_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u16", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u16_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u16_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u16_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u16_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u16_i8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u16_i8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u16_i8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u16_i8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u16_i8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u16_i8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u16_i8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u16_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u16_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u16_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u16_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u16_i16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u16_i16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u16_i16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u16_i16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u16_i16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u16_i16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u16_i16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u16_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u16_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u16_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u16_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u16_i32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u16_i32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u16_i32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u16_i32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u16_i32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u16_i32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u16_i32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u16_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u16_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u16_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u16_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u16_i64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u16_i64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u16_i64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u16_i64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u16_i64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u16_i64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u16_i64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u16_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u16_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u16_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u16_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u16_u8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u16_u8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u16_u8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u16_u8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u16_u8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u16_u8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u16_u8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u16_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u16_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u16_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u16_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u16_u16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u16_u16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u16_u16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u16_u16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u16_u16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u16_u16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u16_u16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u16_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u16_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u16_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u16_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u16_u32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u16_u32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u16_u32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u16_u32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u16_u32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u16_u32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u16_u32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u16_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u16_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u16_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u16_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u16_u64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u16_u64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u16_u64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u16_u64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u16_u64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u16_u64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u16_u64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_u16_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_u16_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_u16_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_u16_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_u16_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_u16_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_u16_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_u16_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_u16_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_u16_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u32_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u32_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u32_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u32_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u32_i8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u32_i8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u32_i8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u32_i8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u32_i8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u32_i8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u32_i8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u32_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u32_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u32_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u32_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u32_i16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u32_i16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u32_i16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u32_i16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u32_i16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u32_i16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u32_i16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u32_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u32_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u32_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u32_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u32_i32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u32_i32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u32_i32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u32_i32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u32_i32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u32_i32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u32_i32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u32_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u32_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u32_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u32_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u32_i64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u32_i64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u32_i64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u32_i64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u32_i64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u32_i64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u32_i64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u32_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u32_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u32_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u32_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u32_u8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u32_u8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u32_u8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u32_u8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u32_u8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u32_u8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u32_u8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u32_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u32_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u32_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u32_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u32_u16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u32_u16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u32_u16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u32_u16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u32_u16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u32_u16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u32_u16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u32_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u32_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u32_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u32_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u32_u32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u32_u32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u32_u32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u32_u32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u32_u32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u32_u32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u32_u32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u32_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u32_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u32_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u32_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u32_u64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u32_u64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u32_u64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u32_u64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u32_u64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u32_u64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u32_u64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_u32_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_u32_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_u32_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_u32_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_u32_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_u32_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_u32_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_u32_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_u32_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_u32_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u64", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u64_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u64_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u64_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u64_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u64_i8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u64_i8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u64_i8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u64_i8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u64_i8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u64_i8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u64_i8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u64_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u64_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u64_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u64_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u64_i16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u64_i16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u64_i16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u64_i16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u64_i16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u64_i16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u64_i16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u64_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u64_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u64_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u64_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u64_i32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u64_i32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u64_i32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u64_i32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u64_i32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u64_i32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u64_i32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u64_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u64_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u64_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u64_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u64_i64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u64_i64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u64_i64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u64_i64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u64_i64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u64_i64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u64_i64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u64_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u64_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u64_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u64_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u64_u8; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u64_u8; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u64_u8; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u64_u8; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u64_u8; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u64_u8; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u64_u8; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u64_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u64_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u64_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u64_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u64_u16; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u64_u16; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u64_u16; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u64_u16; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u64_u16; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u64_u16; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u64_u16; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u64_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u64_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u64_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u64_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u64_u32; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u64_u32; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u64_u32; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u64_u32; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u64_u32; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u64_u32; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u64_u32; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_u64_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_u64_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_u64_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_u64_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_u64_u64; types.add_func("/=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_modassn_u64_u64; types.add_func("%=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bandassn_u64_u64; types.add_func("&=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_borassn_u64_u64; types.add_func("|=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_bxorassn_u64_u64; types.add_func("^=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_lshiftassn_u64_u64; types.add_func("<<=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_rshiftassn_u64_u64; types.add_func(">>=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_u64_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_u64_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_u64_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_u64_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_u64_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_u64_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_u64_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_u64_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_u64_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_u64_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f32", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f32_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f32_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f32_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f32_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f32_i8; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f32_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f32_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f32_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f32_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f32_i16; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f32_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f32_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f32_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f32_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f32_i32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f32_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f32_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f32_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f32_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f32_i64; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f32_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f32_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f32_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f32_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f32_u8; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f32_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f32_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f32_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f32_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f32_u16; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f32_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f32_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f32_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f32_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f32_u32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f32_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f32_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f32_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f32_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f32_u64; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_f32_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_f32_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_f32_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_f32_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_f32_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_f32_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_f32_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_f32_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_f32_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_f32_f64; types.add_func("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f64", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i1", nullptr));

t2 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f64_i8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f64_i8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f64_i8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f64_i8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f64_i8; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f64_i16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f64_i16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f64_i16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f64_i16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f64_i16; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f64_i32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f64_i32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f64_i32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f64_i32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f64_i32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f64_i64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f64_i64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f64_i64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f64_i64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f64_i64; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f64_u8; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f64_u8; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f64_u8; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f64_u8; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f64_u8; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f64_u16; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f64_u16; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f64_u16; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f64_u16; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f64_u16; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f64_u32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f64_u32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f64_u32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f64_u32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f64_u32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_assn_f64_u64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_addassn_f64_u64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_subassn_f64_u64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_mulassn_f64_u64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t1->copy()); fn->intrin_fn = intrinsic_divassn_f64_u64; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_f64_f32; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_f64_f32; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_f64_f32; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_f64_f32; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_f64_f32; types.add_func("/=", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_assn_f64_f64; types.add_func("=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_addassn_f64_f64; types.add_func("+=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_subassn_f64_f64; types.add_func("-=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_mulassn_f64_f64; types.add_func("*=", fn, true);
fn = func(types, {t1->copy(REF), t2->copy(CONST | REF)}, t2->copy()); fn->intrin_fn = intrinsic_divassn_f64_f64; types.add_func("/=", fn, true);

