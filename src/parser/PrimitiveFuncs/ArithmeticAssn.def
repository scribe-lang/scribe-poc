// Assign Arithmetic

t1 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_i8_i8, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_i8_i8, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_i8_i8, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_i8_i8, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_i8_i8, IVALUE); types.addFunc("/=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_modassn_i8_i8, IVALUE); types.addFunc("%=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bandassn_i8_i8, IVALUE); types.addFunc("&=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_borassn_i8_i8, IVALUE); types.addFunc("|=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxorassn_i8_i8, IVALUE); types.addFunc("^=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshiftassn_i8_i8, IVALUE); types.addFunc("<<=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshiftassn_i8_i8, IVALUE); types.addFunc(">>=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_i16_i16, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_i16_i16, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_i16_i16, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_i16_i16, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_i16_i16, IVALUE); types.addFunc("/=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_modassn_i16_i16, IVALUE); types.addFunc("%=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bandassn_i16_i16, IVALUE); types.addFunc("&=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_borassn_i16_i16, IVALUE); types.addFunc("|=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxorassn_i16_i16, IVALUE); types.addFunc("^=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshiftassn_i16_i16, IVALUE); types.addFunc("<<=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshiftassn_i16_i16, IVALUE); types.addFunc(">>=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_i32_i32, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_i32_i32, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_i32_i32, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_i32_i32, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_i32_i32, IVALUE); types.addFunc("/=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_modassn_i32_i32, IVALUE); types.addFunc("%=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bandassn_i32_i32, IVALUE); types.addFunc("&=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_borassn_i32_i32, IVALUE); types.addFunc("|=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxorassn_i32_i32, IVALUE); types.addFunc("^=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshiftassn_i32_i32, IVALUE); types.addFunc("<<=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshiftassn_i32_i32, IVALUE); types.addFunc(">>=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_i64_i64, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_i64_i64, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_i64_i64, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_i64_i64, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_i64_i64, IVALUE); types.addFunc("/=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_modassn_i64_i64, IVALUE); types.addFunc("%=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bandassn_i64_i64, IVALUE); types.addFunc("&=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_borassn_i64_i64, IVALUE); types.addFunc("|=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxorassn_i64_i64, IVALUE); types.addFunc("^=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshiftassn_i64_i64, IVALUE); types.addFunc("<<=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshiftassn_i64_i64, IVALUE); types.addFunc(">>=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_u8_u8, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_u8_u8, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_u8_u8, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_u8_u8, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_u8_u8, IVALUE); types.addFunc("/=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_modassn_u8_u8, IVALUE); types.addFunc("%=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bandassn_u8_u8, IVALUE); types.addFunc("&=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_borassn_u8_u8, IVALUE); types.addFunc("|=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxorassn_u8_u8, IVALUE); types.addFunc("^=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshiftassn_u8_u8, IVALUE); types.addFunc("<<=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshiftassn_u8_u8, IVALUE); types.addFunc(">>=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_u16_u16, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_u16_u16, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_u16_u16, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_u16_u16, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_u16_u16, IVALUE); types.addFunc("/=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_modassn_u16_u16, IVALUE); types.addFunc("%=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bandassn_u16_u16, IVALUE); types.addFunc("&=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_borassn_u16_u16, IVALUE); types.addFunc("|=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxorassn_u16_u16, IVALUE); types.addFunc("^=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshiftassn_u16_u16, IVALUE); types.addFunc("<<=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshiftassn_u16_u16, IVALUE); types.addFunc(">>=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_u32_u32, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_u32_u32, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_u32_u32, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_u32_u32, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_u32_u32, IVALUE); types.addFunc("/=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_modassn_u32_u32, IVALUE); types.addFunc("%=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bandassn_u32_u32, IVALUE); types.addFunc("&=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_borassn_u32_u32, IVALUE); types.addFunc("|=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxorassn_u32_u32, IVALUE); types.addFunc("^=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshiftassn_u32_u32, IVALUE); types.addFunc("<<=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshiftassn_u32_u32, IVALUE); types.addFunc(">>=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_u64_u64, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_u64_u64, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_u64_u64, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_u64_u64, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_u64_u64, IVALUE); types.addFunc("/=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_modassn_u64_u64, IVALUE); types.addFunc("%=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bandassn_u64_u64, IVALUE); types.addFunc("&=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_borassn_u64_u64, IVALUE); types.addFunc("|=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxorassn_u64_u64, IVALUE); types.addFunc("^=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshiftassn_u64_u64, IVALUE); types.addFunc("<<=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshiftassn_u64_u64, IVALUE); types.addFunc(">>=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_f32_f32, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_f32_f32, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_f32_f32, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_f32_f32, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_f32_f32, IVALUE); types.addFunc("/=", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_assn_f64_f64, IVALUE); types.addFunc("=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_addassn_f64_f64, IVALUE); types.addFunc("+=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_subassn_f64_f64, IVALUE); types.addFunc("-=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mulassn_f64_f64, IVALUE); types.addFunc("*=", fn, true);
fn = func(types, {t1->copy(REF), t1->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_divassn_f64_f64, IVALUE); types.addFunc("/=", fn, true);

