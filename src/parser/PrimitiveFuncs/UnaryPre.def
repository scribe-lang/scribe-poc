// Unary (Pre) Arithmetic

t1 = static_cast<TypeSimple *>(types.get("i1", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i8", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("~", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i16", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("~", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i32", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("~", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i64", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("~", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u8", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("~", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u16", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("~", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u32", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("~", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u64", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("~", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f32", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f64", nullptr));
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u+", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("u-", fn, true);
fn = func(types, {t1->copy(CONST | REF)}, t1->copy()); types.addFunc("!", fn, true);

