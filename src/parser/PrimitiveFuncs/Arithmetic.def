// Basic Arithmetic

t1 = static_cast<TypeSimple *>(types.get("i8"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_i8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i8_i8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i8_i8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i8_i8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i8_i8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i8_i8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i8_i8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_i16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i8_i16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i8_i16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i8_i16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i8_i16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i8_i16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i8_i16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_i32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i8_i32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i8_i32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i8_i32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i8_i32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i8_i32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i8_i32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_i64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i8_i64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i8_i64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i8_i64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i8_i64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i8_i64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i8_i64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_u8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i8_u8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i8_u8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i8_u8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i8_u8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i8_u8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i8_u8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_u16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i8_u16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i8_u16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i8_u16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i8_u16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i8_u16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i8_u16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_u32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i8_u32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i8_u32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i8_u32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i8_u32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i8_u32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i8_u32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_u64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i8_u64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i8_u64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i8_u64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i8_u64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i8_u64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i8_u64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_i8_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_i8_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_i8_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_i8_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i16"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_i8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i16_i8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i16_i8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i16_i8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i16_i8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i16_i8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i16_i8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_i16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i16_i16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i16_i16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i16_i16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i16_i16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i16_i16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i16_i16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_i32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i16_i32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i16_i32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i16_i32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i16_i32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i16_i32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i16_i32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_i64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i16_i64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i16_i64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i16_i64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i16_i64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i16_i64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i16_i64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_u8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i16_u8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i16_u8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i16_u8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i16_u8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i16_u8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i16_u8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_u16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i16_u16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i16_u16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i16_u16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i16_u16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i16_u16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i16_u16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_u32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i16_u32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i16_u32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i16_u32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i16_u32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i16_u32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i16_u32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_u64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i16_u64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i16_u64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i16_u64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i16_u64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i16_u64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i16_u64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_i16_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_i16_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_i16_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_i16_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i32"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_i8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i32_i8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i32_i8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i32_i8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i32_i8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i32_i8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i32_i8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_i16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i32_i16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i32_i16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i32_i16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i32_i16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i32_i16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i32_i16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_i32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i32_i32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i32_i32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i32_i32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i32_i32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i32_i32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i32_i32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_i64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i32_i64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i32_i64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i32_i64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i32_i64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i32_i64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i32_i64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_u8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i32_u8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i32_u8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i32_u8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i32_u8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i32_u8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i32_u8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_u16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i32_u16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i32_u16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i32_u16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i32_u16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i32_u16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i32_u16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_u32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i32_u32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i32_u32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i32_u32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i32_u32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i32_u32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i32_u32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_u64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i32_u64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i32_u64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i32_u64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i32_u64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i32_u64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i32_u64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_i32_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_i32_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_i32_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_i32_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("i64"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_i8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i64_i8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i64_i8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i64_i8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i64_i8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i64_i8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i64_i8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_i16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i64_i16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i64_i16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i64_i16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i64_i16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i64_i16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i64_i16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_i32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i64_i32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i64_i32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i64_i32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i64_i32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i64_i32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i64_i32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_i64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i64_i64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i64_i64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i64_i64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i64_i64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i64_i64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i64_i64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_u8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i64_u8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i64_u8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i64_u8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i64_u8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i64_u8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i64_u8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_u16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i64_u16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i64_u16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i64_u16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i64_u16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i64_u16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i64_u16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_u32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i64_u32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i64_u32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i64_u32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i64_u32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i64_u32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i64_u32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_u64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_i64_u64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_i64_u64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_i64_u64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_i64_u64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_i64_u64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_i64_u64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_i64_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_i64_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_i64_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_i64_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u8"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_i8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u8_i8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u8_i8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u8_i8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u8_i8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u8_i8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u8_i8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_i16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u8_i16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u8_i16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u8_i16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u8_i16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u8_i16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u8_i16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_i32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u8_i32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u8_i32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u8_i32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u8_i32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u8_i32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u8_i32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_i64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u8_i64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u8_i64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u8_i64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u8_i64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u8_i64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u8_i64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_u8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u8_u8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u8_u8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u8_u8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u8_u8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u8_u8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u8_u8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_u16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u8_u16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u8_u16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u8_u16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u8_u16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u8_u16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u8_u16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_u32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u8_u32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u8_u32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u8_u32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u8_u32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u8_u32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u8_u32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_u64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u8_u64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u8_u64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u8_u64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u8_u64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u8_u64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u8_u64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_u8_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_u8_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_u8_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_u8_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u16"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_i8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u16_i8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u16_i8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u16_i8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u16_i8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u16_i8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u16_i8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_i16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u16_i16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u16_i16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u16_i16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u16_i16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u16_i16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u16_i16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_i32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u16_i32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u16_i32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u16_i32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u16_i32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u16_i32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u16_i32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_i64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u16_i64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u16_i64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u16_i64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u16_i64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u16_i64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u16_i64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_u8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u16_u8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u16_u8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u16_u8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u16_u8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u16_u8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u16_u8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_u16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u16_u16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u16_u16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u16_u16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u16_u16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u16_u16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u16_u16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_u32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u16_u32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u16_u32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u16_u32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u16_u32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u16_u32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u16_u32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_u64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u16_u64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u16_u64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u16_u64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u16_u64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u16_u64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u16_u64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_u16_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_u16_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_u16_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_u16_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u32"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_i8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u32_i8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u32_i8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u32_i8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u32_i8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u32_i8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u32_i8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_i16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u32_i16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u32_i16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u32_i16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u32_i16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u32_i16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u32_i16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_i32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u32_i32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u32_i32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u32_i32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u32_i32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u32_i32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u32_i32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_i64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u32_i64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u32_i64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u32_i64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u32_i64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u32_i64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u32_i64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_u8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u32_u8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u32_u8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u32_u8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u32_u8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u32_u8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u32_u8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_u16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u32_u16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u32_u16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u32_u16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u32_u16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u32_u16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u32_u16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_u32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u32_u32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u32_u32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u32_u32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u32_u32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u32_u32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u32_u32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_u64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u32_u64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u32_u64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u32_u64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u32_u64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u32_u64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u32_u64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_u32_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_u32_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_u32_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_u32_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("u64"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_i8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u64_i8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u64_i8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u64_i8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u64_i8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u64_i8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u64_i8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_i16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u64_i16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u64_i16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u64_i16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u64_i16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u64_i16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u64_i16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_i32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u64_i32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u64_i32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u64_i32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u64_i32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u64_i32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u64_i32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_i64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u64_i64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u64_i64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u64_i64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u64_i64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u64_i64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u64_i64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_u8, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u64_u8, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u64_u8, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u64_u8, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u64_u8, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u64_u8, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u64_u8, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_u16, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u64_u16, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u64_u16, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u64_u16, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u64_u16, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u64_u16, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u64_u16, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_u32, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u64_u32, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u64_u32, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u64_u32, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u64_u32, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u64_u32, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u64_u32, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_u64, IVALUE); types.addFunc("/", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mod_u64_u64, IVALUE); types.addFunc("%", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_band_u64_u64, IVALUE); types.addFunc("&", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bor_u64_u64, IVALUE); types.addFunc("|", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_bxor_u64_u64, IVALUE); types.addFunc("^", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_lshift_u64_u64, IVALUE); types.addFunc("<<", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_rshift_u64_u64, IVALUE); types.addFunc(">>", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_u64_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_u64_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_u64_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_u64_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f32"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_i8, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_i16, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_i32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_i64, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_u8, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_u16, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_u32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_u64, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_f32_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_f32_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_f32_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_f32_f64, IVALUE); types.addFunc("/", fn, true);

t1 = static_cast<TypeSimple *>(types.get("f64"));

t2 = static_cast<TypeSimple *>(types.get("i8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_i8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_i8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_i8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_i8, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_i16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_i16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_i16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_i16, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_i32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_i32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_i32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_i32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("i64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_i64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_i64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_i64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_i64, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u8"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_u8, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_u8, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_u8, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_u8, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u16"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_u16, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_u16, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_u16, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_u16, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_u32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_u32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_u32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_u32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("u64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_u64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_u64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_u64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t1->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_u64, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f32"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_f32, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_f32, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_f32, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_f32, IVALUE); types.addFunc("/", fn, true);

t2 = static_cast<TypeSimple *>(types.get("f64"));
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_add_f64_f64, IVALUE); types.addFunc("+", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_sub_f64_f64, IVALUE); types.addFunc("-", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_mul_f64_f64, IVALUE); types.addFunc("*", fn, true);
fn = func(types, {t1->copy(CONST | REF), t2->copy(CONST | REF)}, t2->copy()); fn->setIntrinsicFunc(intrinsic_div_f64_f64, IVALUE); types.addFunc("/", fn, true);

