/*
	MIT License

	Copyright (c) 2021 Scribe Language Repositories

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so.
*/

#include "parser/Stmts.hpp"
#include "parser/ValueMgr.hpp"

namespace sc
{
namespace parser
{
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBlock::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	for(auto &s : stmts) {
		if(!s) break;
		s->setValueUnique(vals);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtType /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtType::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	if(fn) fn->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtSimple ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtSimple::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtFnCallInfo //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnCallInfo::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	for(auto &t : templates) {
		t->setValueUnique(vals);
	}
	for(auto &a : args) {
		a->setValueUnique(vals);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExpr::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	if(lhs) lhs->setValueUnique(vals);
	if(rhs) rhs->setValueUnique(vals);
	// TODO: or-var & or-blk
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVar::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	if(val) val->setValueUnique(vals);
	if(vtype) vtype->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnSig::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	for(auto &p : args) {
		p->setValueUnique(vals);
	}
	if(rettype) rettype->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnDef::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	sig->setValueUnique(vals);
	if(blk) blk->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtHeader ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtHeader::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtLib //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtLib::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtExtern ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExtern::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	sig->setValueUnique(vals);
	if(headers) headers->setValueUnique(vals);
	if(libs) libs->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtEnum //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtEnum::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtStruct /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtStruct::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	for(auto &f : fields) {
		f->setValueUnique(vals);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtVarDecl ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVarDecl::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	for(auto &d : decls) {
		d->setValueUnique(vals);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtCond::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	for(auto &c : conds) {
		if(c.cond) c.cond->setValueUnique(vals);
		c.blk->setValueUnique(vals);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtForIn /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtForIn::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	in->setValueUnique(vals);
	blk->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFor::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	if(init) init->setValueUnique(vals);
	if(cond) cond->setValueUnique(vals);
	if(incr) incr->setValueUnique(vals);
	blk->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtWhile ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtWhile::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	if(cond) cond->setValueUnique(vals);
	blk->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtRet::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
	if(val) val->setValueUnique(vals);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtContinue ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtContinue::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBreak ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBreak::setValueUnique(ValueMgr &vals)
{
	if(value) value = vals.get(value);
}
} // namespace parser
} // namespace sc